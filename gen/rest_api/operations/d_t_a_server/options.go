// Code generated by go-swagger; DO NOT EDIT.

package d_t_a_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// OptionsHandlerFunc turns a function with the right signature into a options handler
type OptionsHandlerFunc func(OptionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OptionsHandlerFunc) Handle(params OptionsParams) middleware.Responder {
	return fn(params)
}

// OptionsHandler interface for that can handle valid options params
type OptionsHandler interface {
	Handle(OptionsParams) middleware.Responder
}

// NewOptions creates a new http.Handler for the options operation
func NewOptions(ctx *middleware.Context, handler OptionsHandler) *Options {
	return &Options{Context: ctx, Handler: handler}
}

/*Options swagger:route GET /v1/service/options DTAServer options

Options options API

*/
type Options struct {
	Context *middleware.Context
	Handler OptionsHandler
}

func (o *Options) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOptionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
