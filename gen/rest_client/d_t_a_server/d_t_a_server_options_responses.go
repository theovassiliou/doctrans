// Code generated by go-swagger; DO NOT EDIT.

package d_t_a_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/theovassiliou/doctrans/gen/rest_models"
)

// DTAServerOptionsReader is a Reader for the DTAServerOptions structure.
type DTAServerOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DTAServerOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDTAServerOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDTAServerOptionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDTAServerOptionsOK creates a DTAServerOptionsOK with default headers values
func NewDTAServerOptionsOK() *DTAServerOptionsOK {
	return &DTAServerOptionsOK{}
}

/*DTAServerOptionsOK handles this case with default header values.

A successful response.
*/
type DTAServerOptionsOK struct {
	Payload *rest_models.DtaserviceOptionsResponse
}

func (o *DTAServerOptionsOK) Error() string {
	return fmt.Sprintf("[GET /v1/service/options][%d] dTAServerOptionsOK  %+v", 200, o.Payload)
}

func (o *DTAServerOptionsOK) GetPayload() *rest_models.DtaserviceOptionsResponse {
	return o.Payload
}

func (o *DTAServerOptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_models.DtaserviceOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDTAServerOptionsDefault creates a DTAServerOptionsDefault with default headers values
func NewDTAServerOptionsDefault(code int) *DTAServerOptionsDefault {
	return &DTAServerOptionsDefault{
		_statusCode: code,
	}
}

/*DTAServerOptionsDefault handles this case with default header values.

An unexpected error response
*/
type DTAServerOptionsDefault struct {
	_statusCode int

	Payload *rest_models.RuntimeError
}

// Code gets the status code for the d t a server options default response
func (o *DTAServerOptionsDefault) Code() int {
	return o._statusCode
}

func (o *DTAServerOptionsDefault) Error() string {
	return fmt.Sprintf("[GET /v1/service/options][%d] DTAServer_Options default  %+v", o._statusCode, o.Payload)
}

func (o *DTAServerOptionsDefault) GetPayload() *rest_models.RuntimeError {
	return o.Payload
}

func (o *DTAServerOptionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
