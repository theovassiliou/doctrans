// Code generated by go-swagger; DO NOT EDIT.

package d_t_a_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new d t a server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d t a server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DTAServerListServices(params *DTAServerListServicesParams) (*DTAServerListServicesOK, error)

	DTAServerOptions(params *DTAServerOptionsParams) (*DTAServerOptionsOK, error)

	DTAServerTransformDocument(params *DTAServerTransformDocumentParams) (*DTAServerTransformDocumentOK, error)

	DTAServerTransformPipe(params *DTAServerTransformPipeParams) (*DTAServerTransformPipeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DTAServerListServices d t a server list services API
*/
func (a *Client) DTAServerListServices(params *DTAServerListServicesParams) (*DTAServerListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDTAServerListServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DTAServer_ListServices",
		Method:             "GET",
		PathPattern:        "/v1/service/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DTAServerListServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DTAServerListServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DTAServerListServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DTAServerOptions d t a server options API
*/
func (a *Client) DTAServerOptions(params *DTAServerOptionsParams) (*DTAServerOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDTAServerOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DTAServer_Options",
		Method:             "GET",
		PathPattern:        "/v1/service/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DTAServerOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DTAServerOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DTAServerOptionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DTAServerTransformDocument requests to transform a plain text document
*/
func (a *Client) DTAServerTransformDocument(params *DTAServerTransformDocumentParams) (*DTAServerTransformDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDTAServerTransformDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DTAServer_TransformDocument",
		Method:             "POST",
		PathPattern:        "/v1/document/transform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DTAServerTransformDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DTAServerTransformDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DTAServerTransformDocumentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DTAServerTransformPipe d t a server transform pipe API
*/
func (a *Client) DTAServerTransformPipe(params *DTAServerTransformPipeParams) (*DTAServerTransformPipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDTAServerTransformPipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DTAServer_TransformPipe",
		Method:             "POST",
		PathPattern:        "/v1/document/transform-pipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DTAServerTransformPipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DTAServerTransformPipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DTAServerTransformPipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
