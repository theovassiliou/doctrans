// MIT License
//
// Copyright (c) 2019 Theofanis Vassiliou-Gioles
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package dtaservice;

import "google/api/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// The DTA service definition.
service DTAServer {
  // Request to transform a plain text document
  rpc TransformDocument (DocumentRequest) returns (TransformDocumentResponse) {
       option (google.api.http) = {
        post: "/v1/document/transform"
        body: "*"
      };
  }
  rpc ListServices(ListServiceRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/v1/service/list"
    };
  }
  rpc TransformPipe(TransformPipeRequest) returns (TransformDocumentResponse) {
    option (google.api.http) = {
      post: "/v1/document/transform-pipe"
      body: "*"
    };
  }
  rpc Options(OptionsRequest) returns (OptionsResponse) {
    option (google.api.http) = {
      get: "/v1/service/options"
    };
  }
}

// The request message containing the document to be transformed
message DocumentRequest {
  string file_name = 1;
  bytes document = 2;
  string service_name = 3 [(validator.field) = {string_not_empty : true}];
  repeated string options = 4;
}

// The response message containing the transformed message
message TransformDocumentResponse {
  bytes trans_document = 1;
  repeated string trans_output = 2;
  repeated string error = 3;
}

message ListServiceRequest {
}
message OptionsRequest {
}

message ListServicesResponse {
  repeated string services = 1;
}

message OptionsResponse {
  string services = 1;
}

message TransformPipeRequest {
  repeated DocumentRequest pipe = 1;
}
